---
layout: post
title:  "Next Gen Category Theory"
date:   2015-04-05 10:50:00
categories: category theory
---

Question posed by a coworker, "How do we involve the next generation of young minds? These young minds will define each new business idea and will expand our technologies. How do we help these young people become all they can be?"

Two words came to mind, Category Theory.  We might as well go full Grothendieck and teach them the mathematics of technological design.

![Jedi Master Grothendieck](http://www.thebigquestions.com/grothendieck-460x300.jpg)

Functional languages like Scala are eating Java, C++ is getting lambdas, C# designer Eric Meijer is developing a [new MOOC](https://www.youtube.com/watch?v=siWIiI1Ls-s). Cateogory Theory is no longer an abstract nonsense hipster lovechild of the 1960s. It is the future of our industry. 

As technology has grown serious projects cannot fit into our head. It's vital to simplify problems into their essense. Conal Elliot calls this [denotaional design](https://www.youtube.com/watch?v=zzCrZEil9iI). Ritch Hickey calls this [decomplection](http://www.infoq.com/presentations/Simple-Made-Easy). Bartosz Milewski [doesn't sugar coat it](http://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/) and demonstrates how tools like C++ make it very hard to write simple programs. 

The books I plan on using with my middle school aged kids are [How to Bake Pi](http://www.amazon.com/How-Bake-Pi-Exploration-Mathematics/dp/0465051715)
 and [Conceptual Mathematics: A First Introduction to Categories](http://www.amazon.com/Conceptual-Mathematics-First-Introduction-Categories/dp/052171916X). For concrete examples [The Haskell Road to Logic Maths and Programming](http://www.amazon.com/Haskell-Programming-Second-Edition-Computing/dp/0954300696) is great, perhaps with some Swift since our oldest likes playing around with iOS SpriteKit.

As software engineers we owe our next generation the task of viewing code through a category lens, and decomplecting our ugliness. In a followup post I will detail how I am using g++ and cmake to generate a category diagram for a massive codebase, and gcov to chase the morphisms.

