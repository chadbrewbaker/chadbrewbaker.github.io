---
layout: post
title:  "Understanding interest with d3js"
date:   2015-12-08 12:38:19
categories: data d3js
---

There was a discussion at [Gravitate](http://www.gravitatedsm.com) about an investor wanting to calculate the [Institutional Rate of Return](http://www.investopedia.com/exam-guide/cfa-level-1/corporate-finance/npv-net-present-value-irr-internal-rate-of-return.asp?header_alt=c) of a startup.

Whether you are a startup wanting to know how long it will take an investor to break even, or a prospective home buyer wondering how long it would take to pay off a mortgage, the calculation is the same.

Scroll down to the bottom of the page to see the interactive chart.

We used some Haskell and d3js to visualize how long it takes to pay off a $200,000 investment at around 3.5% annual interest. Take particular notice of the left side of the curve. Hustling to get an early cashflow, or making double payments on your mortgage early on really helps. 

Happy holidays from DataCulture!



{% highlight haskell %}
monthsToZero :: Float -> Float -> Float  -> Int
monthsToZero principal rateMonthly payMonthly | principal <= 0  = 0
                                              | principal > 0 =  1 + monthsToZero ((principal - payMonthly)+ (principal - payMonthly)*rateMonthly) rateMonthly payMonthly


monthsOnSTDMortgage :: Float -> Int
monthsOnSTDMortgage payMonthly = (monthsToZero 200000 0.002871 payMonthly)

payments = take 9101 $ iterate (+1) (900 :: Float)

paybacks = map monthsOnSTDMortgage payments

pairs = zip payments paybacks

pairToCSV (a,b) = show a ++ "," ++ show b ++ "\n" 

csv = unlines $ map pairToCSV pairs

main = do
	    putStrLn "Payment,PaybackPeriod"
	    putStrLn csv

{% endhighlight %}


<style>

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.dot {
  stroke: #000;
}

.tooltip {
  position: absolute;
  width: 200px;
  height: 28px;
  pointer-events: none;
}
</style>
<script src="http://d3js.org/d3.v3.min.js"></script>

<script>
var margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

/* 
 * value accessor - returns the value to encode for a given data object.
 * scale - maps value to a visual display encoding, such as a pixel position.
 * map function - maps from data value to display value
 * axis - sets up axis
 */ 

// setup x 
var xValue = function(d) { return d.Payment;}, // data -> value
    xScale = d3.scale.linear().range([0, width]), // value -> display
    xMap = function(d) { return xScale(xValue(d));}, // data -> display
    xAxis = d3.svg.axis().scale(xScale).orient("bottom");

// setup y
var yValue = function(d) { return d["PaybackPeriod"];}, // data -> value
    yScale = d3.scale.linear().range([height, 0]), // value -> display
    yMap = function(d) { return yScale(yValue(d));}, // data -> display
    yAxis = d3.svg.axis().scale(yScale).orient("left");

// setup fill color
var cValue = function(d) { return d.Avoided;},
    color = d3.scale.category10();

// add the graph canvas to the body of the webpage
var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

// add the tooltip area to the webpage
var tooltip = d3.select("body").append("div")
    .attr("class", "tooltip")
    .style("opacity", 0);

// load data
var url = window.location.origin
var fileLocation = url.concat("/assets/payback.csv")
d3.csv(fileLocation, function(error, data) {

  // change string (from CSV) into number format
  data.forEach(function(d) {
    d.Payment = +d.Payment;
    d["PaybackPeriod"] = +d["PaybackPeriod"];

  });

  // don't want dots overlapping axis, so add in buffer to data domain
  xScale.domain([d3.min(data, xValue)-1, d3.max(data, xValue)+1]);
  yScale.domain([d3.min(data, yValue)-1, d3.max(data, yValue)+1]);

  // x-axis
  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis)
    .append("text")
      .attr("class", "label")
      .attr("x", width)
      .attr("y", -6)
      .style("text-anchor", "end")
      .text("Payment Per Month");

  // y-axis
  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("class", "label")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Payback Period (Months)");

  // draw dots
  svg.selectAll(".dot")
      .data(data)
    .enter().append("circle")
      .attr("class", "dot")
      .attr("r", 3.5)
      .attr("cx", xMap)
      .attr("cy", yMap)
      .style("fill", function(d) { return color(cValue(d));}) 
      .on("mouseover", function(d) {
          tooltip.transition()
               .duration(200)
               .style("opacity", .9);
          tooltip.html("(Dollars Per Month, Months)"+ "<br/> (" + xValue(d) 
	        + ", " + yValue(d) + ")")
               .style("left", (d3.event.pageX + 5) + "px")
               .style("top", (d3.event.pageY - 28) + "px");
      })
      .on("mouseout", function(d) {
          tooltip.transition()
               .duration(500)
               .style("opacity", 0);
      });

  // draw legend
  var legend = svg.selectAll(".legend")
      .data(color.domain())
    .enter().append("g")
      .attr("class", "legend")
      .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  
});

</script>